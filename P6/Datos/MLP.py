import numpy as np
import math

class MLP:

    """
    Constructor: Computes MLP.

    Args:
        inputLayer (int): size of input
        hiddenLayer (int): size of hidden layer.
        outputLayer (int): size of output layer
        seed (scalar): seed of the random numeric.
        epislom (scalar) : random initialization range. e.j: 1 = [-1..1], 2 = [-2,2]...
    """

    def __init__(self,inputLayer,hiddenLayer, outputLayer, seed=0, epislom = 0.12):
        np.random.seed(seed)

        theta1 = np.random.uniform(-epislom, epislom, (hiddenLayer, inputLayer + 1))
        theta2 = np.random.uniform(-epislom, epislom, (outputLayer, hiddenLayer + 1))

        self.epsilon = epislom
        self.new_trained(theta1,theta2)

        self.inputLayer = inputLayer
        self.hiddenLayer = hiddenLayer
        self.outputLayer = outputLayer
        """
    Reset the theta matrix created in the constructor by both theta matrix manualy loaded.

    Args:
        theta1 (array_like): Weights for the first layer in the neural network.
        theta2 (array_like): Weights for the second layer in the neural network.
    """
    def new_trained(self,theta1,theta2):
        self.theta1 = theta1
        self.theta2 = theta2
        
    """
    Num elements in the training data. (private)

    Args:
        x (array_like): input data. 
    """
    def _size(self,x):
        return x.shape[0]
    
    """
    Computes de sigmoid function of z (private)

    Args:
        z (array_like): activation signal received by the layer.
    """
    def _sigmoid(self,z):
       return 1 / (1 + np.power(np.e, -z))

    """
    Computes de sigmoid derivation of de activation (private)

    Args:
        a (array_like): activation received by the layer.
    """   
    def _sigmoidPrime(self,a):
        sigmoid = self._sigmoid(a)  # Sigmoid function
        sigmoid_derivative = sigmoid * (1 - sigmoid)
        return sigmoid_derivative
    """
    Run the feedwordwar neural network step

    Args:
        x (array_like): input of the neural network.

	Return 
	------
	a1,a2,a3 (array_like): activation functions of each layers
    z2,z3 (array_like): signal fuction of two last layers
    """
    def feedforward(self,x):
        m = self._size(x)
        
        a1 = np.hstack([np.ones((m, 1)), x])
       
        z2 = np.dot(a1,self.theta1.T)  
        a2 = np.hstack([np.ones((m, 1)), self._sigmoid(z2)])

        z3 =np.dot(a2,self.theta2.T)  
        a3 = self._sigmoid(z3)

        return a1, a2, a3, z2, z3


    """
    Computes only the cost of a previously generated output (private)

    Args:
        yPrime (array_like): output generated by neural network.
        y (array_like): output from the dataset
        lambda_ (scalar): regularization parameter

	Return 
	------
	J (scalar): the cost.
    """
    def compute_cost(self, yPrime,y, lambda_): 
        m = self._size(yPrime)
        J = -np.sum(np.sum(y * np.log(yPrime) + (1 - y) * np.log(1 - yPrime)))/m
        J += self._regularizationL2Cost(m,lambda_)
        return J
    """
    Get the class with highest activation value

    Args:
        a3 (array_like): output generated by neural network.

	Return 
	------
	p (scalar): the class index with the highest activation value.
    """
    def predict(self,a3):
         y_pred = np.argmax(a3 ,axis = 1) 
         return y_pred
    

    """
    Compute the gradients of both theta matrix parámeters and cost J

    Args:
        x (array_like): input of the neural network.
        y (array_like): output of the neural network.
        lambda_ (scalar): regularization.

	Return 
	------
	J: cost
    grad1, grad2: the gradient matrix (same shape than theta1 and theta2)
    """
    def compute_gradients(self, x, y, lambda_):
        a1, a2, a3, z2, z3 = self.feedforward(x)
        # Calculamos el coste sin regularizacion
        J = self.compute_cost(a3,y,lambda_)
         
        m = self._size(x)
        # Error en la salida
        error = a3 - y 
        error_capa_oculta = np.dot(error,self.theta2[:,1:]) * self._sigmoidPrime(z2)

        grad2 = np.dot(error.T,a2) / m  # Gradiente para theta2
        grad1 = np.dot(error_capa_oculta.T,a1) / m  # Gradiente para theta1
        
        # Regularización (sin incluir bias)
        grad2[:, 1:] += self._regularizationL2Gradient(self.theta2,lambda_,m)
        grad1[:, 1:] += self._regularizationL2Gradient(self.theta1,lambda_,m)

        return (J, grad1, grad2)
    
    """
    Compute L2 regularization gradient

    Args:
        theta (array_like): a theta matrix to calculate the regularization.
        lambda_ (scalar): regularization.
        m (scalar): the size of the X examples.

	Return 
	------
	L2 Gradient value
    """
    def _regularizationL2Gradient(self, theta, lambda_, m):
        return  (lambda_ / m) * theta[:, 1:]  
    """
    Compute L2 regularization cost

    Args:
        lambda_ (scalar): regularization.
        m (scalar): the size of the X examples.

	Return 
	------
	L2 cost value
    """

    def _regularizationL2Cost(self, m, lambda_):
        # Si en un futuro queremos incluir mas matrices de pesos, tendremos que añadir mas sumatorios.
        # Si m es <0 el codigo explota
        reg_cost =  np.sum(np.square(self.theta1[:,1:])) + np.sum(np.square(self.theta2[:,1:])) 
        reg_cost_final = (lambda_ / (2 * m)) * reg_cost
        return reg_cost_final
    

    def backpropagation(self, x, y, alpha, lambda_, numIte, verbose=0):
        Jhistory = []
        for i in range(numIte):
            # Paso 1: Calcular costo y gradientes
            J, grad1, grad2 = self.compute_gradients(x, y, lambda_)

            # Paso 2: Actualizar los parámetros theta usando descenso de gradiente
            self.theta1 -= alpha * grad1
            self.theta2 -= alpha * grad2

            # Paso 3: Guardar el costo en el historial
            Jhistory.append(J)
            if verbose > 0 :
                 if i % verbose == 0 or i == (numIte-1):
                    print(f"Iteration {(i+1):6}: Cost {float(J):8.4f}   ")

        return Jhistory
    


"""
target_gradient funcitón of gradient test 1
"""
def target_gradient(input_layer_size,hidden_layer_size,num_labels,x,y,reg_param):
    mlp = MLP(input_layer_size,hidden_layer_size,num_labels)
    J, grad1, grad2 = mlp.compute_gradients(x,y,reg_param)
    return J, grad1, grad2, mlp.theta1, mlp.theta2


"""
costNN funcitón of gradient test 1
"""
def costNN(Theta1, Theta2,x, ys, reg_param):
    mlp = MLP(x.shape[1],1, ys.shape[1])
    mlp.new_trained(Theta1,Theta2)
    J, grad1, grad2 = mlp.compute_gradients(x,ys,reg_param)
    return J, grad1, grad2


"""
mlp_backprop_predict 2 to be execute test 2
"""
def MLP_backprop_predict(X_train,y_train, X_test, alpha, lambda_, num_ite, verbose):
    mlp = MLP(X_train.shape[1],25,y_train.shape[1])
    Jhistory = mlp.backpropagation(X_train,y_train,alpha,lambda_,num_ite,verbose)
    a1, a2, a3, z2, z3 = mlp.feedforward(X_test)
    y_pred=mlp.predict(a3)
    return y_pred